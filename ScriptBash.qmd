# Wildcards y Streams

``` {.bash code-copy="true" eval="false"}
wc _files/secuencias_bash.fastq
# 300   600 12934 secuencias_bash.fastq
```

Esto nos dice que el archivo cuenta con 400 lineas, 500 palabras y 12934 caracteres.

## Caracteres y strings

Los `caracteres` son unidades de información que se representan con símbolos. Pueden ser de varios tipos como alfanuméricos, números enteros, signos de puntuación. Varios caracteres son interpretados por la shell de manera especial. Estos se llaman `caracteres especiales`, claro, y permiten desarrollar alguna lógica, dependiendo del contexto. Por ejemplo, algunos caracteres: `@` `#` `.` `?` `!` `,` `/` `\` `>` `~` `a` `µ` `g` `§` `R`.

::: callout-note
Cada caracter se asocia a una combinación diferente de teclas en el teclado del computador.
:::

Los `strings` son arreglos de caracteres. Esto quiere decir que son caracteres en conjunto y con un orden en particular. Por ejemplo el string `pizza` tiene 4 diferentes caracteres: `i`, `p`, `z`, `a`. Diferentes combinaciones de caracteres pueden formar diferentes strings.

Creemos un string y luego imprimámoslo en la pantalla del Terminal. Escribe los siguientes comandos:

``` {.bash code-copy="true" eval="false"}
mi_primer_string="Taller de bioinformática"
echo $mi_primer_string
```

## Wildcards

Los `wildcards` o `wild characters` son símbolos utilizados para representar uno o más caracteres. Se pueden utilizar con otros comandos para facilitar el procesamiento o búsqueda de archivos, directorios y datos en general.

| **Wildcard** | **Función**                                                                                                    |
|-------------|-----------------------------------------------------------|
| `*`          | Asocia **uno o más** caracteres especificados por el usuario, con caracteres en un string con el que se opera. |
| `?`          | Asocia **solo un** caracter a la vez en un string.                                                             |
| `[ ]`        | Asocia **cuaquiera** de los caracteres dentro en un string.                                                    |

::: callout-important
El wildcard más usado es `*` porque es muy versátil.
:::

::: callout-note
## Ejercicio 4

El wildcard `*` me permitiría encontrar todos los archivos en una carpeta que tengan la palabra `TESIS` en ellos. Primero generemos estos archivos:

``` {.bash code-copy="true" eval="false"}
cd ~/taller_unix/3_manejo_terminal 
touch MI_TESIS.tex MI_TESIS_tutor2.tex TESIS.tex TESIS_YA_ACABATE.tex TESIS_finaaaaal.tex TESIS_final.tex TESIS_tutor1.tex TESIS_tutor2.tex a_reporte_01.txt b_reporte_02.txt c_reporte_03.txt z_reporte_30.txt 
```

1.  Enlista todos los archivos que comiencen con "`TESIS`".
2.  Enlista todos los archivos que terminen con el string "`.tex`"
3.  Buscar todos los archivos contengan la palabra "`TESIS"` pero con 3 caracteres desconocidos antes.
4.  Buscar los archivos que terminen con el número 1 o 2 en su nombre antes de la extensión del archivo.
5.  Encontrar los archivos que terminen en dos números del 1 al 3 y del 0 al 2 antes del formato del archivo.
6.  Encontrar todos los archivos con este formato `?_reporte_[0-3][0-3].txt`
7.  Encontrar todos los archivos que contengan por `a` o `z`.
8.  Borramos todos estor archivos que terminen en ".txt" y ".tex"

::: {.callout-tip collapse="true" icon="false"}
## Solución

```         
1. ls -l TESIS*
2. ls -l *.tex
3. ls -l ???TESIS*
4. ls -l *[1-2].tex
5. ls -l *[0-3][0-2].txt
6. ls -l ?_reporte_[0-3][0-3].txt
7. ls -l *[az]*
8. rm *.tex *.txt
```
:::
:::

## Operadores de redirección de datos I/O

Usualmente cuando trabajamos con datos, es necesario pasar el resultado de un comando a otro para hacer un procesamiento de datos apilado, como en un algortimo. Un `stream` o `corriente` esta hecha de datos. Es una corriente de datos. Un ejemplo muy familiar es el teclado y la pantalla. El teclado tiene una interfaz en donde por cada tecla presionada, un caracter se guarda en un archivo. Se dice entonces que es una `corriente de entrada`. Cuando la pantalla nos muestra lo que estamos escribiendo entonces la data sale hacia nosotros y eso convierte a la pantalla en una `corriente de salida`. Los dispositivos que hacen este tipo de transmisión de datos se llaman dispositivos `I/O` (input y output). Los operadores que se encargan de esto se conocen como `operadores de redirección`. Tres importantes son:

| **Comando** | **Función**                                                                              |
|--------------|----------------------------------------------------------|
| `>`         | Stream de **salida de datos**. Sobre escribre sobre un archivo.                          |
| `>>`        | Stream de salida de datos. Adjunta **nueva salida a datos preexistentes en un archivo.** |
| `<`         | Stream de **entrada de datos.** Recibe datos para procesamiento con algun comando.       |

::: callout-note
## Ejercicio 5

1.  Crea el archivo `bacterias_generos.txt` e imprime su contenido empleando los siguientes comandos:

``` {.bash code-copy="true" eval="false"}
echo -e "\nRickettsia\nOrientia\nWolbachia\nAegyptianella\nAnaplasma\nCowdria\nEhrlichia\nNeorickettsia\nCaedibacter\nHolospora\nLyticum\nOdyssella\nSymbiotes\nTectibacter" > bacterias_generos.txt
cat bacterias_generos.txt
```

2.  Agrega una nueva especie en la ultima fila empleando "\>\>".

    ``` {.bash code-copy="true" eval="false"}
    echo -e "\nEscherichia\n:D" >> bacterias_generos.txt
    cat bacterias_generos.txt
    ```

3.  Ahora usaremos el comando `sort` para reordenar todos los géneros. Sin embargo notamos que el archivo original no cambia nunca.

    ``` {.bash code-copy="true" eval="false"}
    sort < bacterias_generos.txt
    ```

4.  Para hacer un cambio sobte `bacterias_generos.txt`, usamos este comando. Notamos que ahora no usamos `>>` sino solo `>`. Esto va a borrar el contenido previo con géneros desordenados y ahora los va a ordenar. El cambio no se puede deshacer, así que ten cuidado con el operador `>` para que no pierdas datos.

    ``` {.bash code-copy="true" eval="false"}
    (sort < bacterias_generos.txt) > bacterias_generos_sorted.txt
    cat bacterias_generos_sorted.txt
    ```
:::

::: callout-warning
## Advertencia

El operador `>` sobre escribe archivos. Ten cuidado al usarlo para que no pierdas datos.
:::

# Scripts en Bash

Los `scripts` son archivos de texto que contienen instrucciones ejecutables por un intérprete de un lenguaje de programación para la ejecución de tareas. El formato `.sh` se utiliza para escribir `scripts ejecutables` por un intérprete como **Bash**. En esta sección crearemos varios scripts de Bash y usaremos varios comandos y operadores.

::: callout-note
Los script de Bash contiene al inicio esta descripción `#!bin/bash` y la extensión `.sh`
:::

## Actividad grupal

**Paso 1.** Crear un script en Bash con el nombre demo.sh empleando nano.

``` {.bash code-copy="true" eval="false"}
nano demo.sh
```

**Paso 2.** Copia el siguiente código dentro del script `demo.sh` y guarda los cambios.

``` {.bash code-copy="true" eval="false"}

#!/bin/bash
# File: demo.sh

# Input de archivo
# 2. Mostrar el archivo y número de argumentos
echo "Archivo a procesar > $@"
echo "Numero de argumentos: $#"

# 3. Conteo de secuencias y separación de malas lecturas
numero_secuencias=$(grep -c '^@SRR098026' $@)
grep -B1 -A2 NNNNNNNNNN $@ > malas_lecturas.fastq
malas=$(cat malas_lecturas.fastq | wc -l)
echo "Número de malas lecturas: $malas"

# 4. Búsqueda de patrones
echo "Desea buscar patrones (y/n): "
read d

if [[ $d == "y" ]]; then
    echo "Los patrones se guardarán en: patrones.txt"
    echo -e 'ACTG\nCCCCC\nNNNCNNN\nNNNGNNN\nTTTT\nTATA\nAAA' > patrones.txt
    grep -f patrones.txt $@ > busqueda.txt
    echo "Búsqueda de patrones guardada en: busqueda.txt"
else
    echo "ok :P"
fi

# Mensaje final
echo "Fin :)"
```

::: {.callout-note collapse="true"}
## Explicación del código

-   1\. **Comentarios y declaración de archivo**

-   `#!/bin/bash`: Indica que el script se ejecutará usando el intérprete de Bash.

-   `# File: demo.sh`: Un comentario que indica el nombre del archivo del script.

-   2\. **Mostrar el archivo y número de argumentos**

-   `echo "Archivo a procesar > $@"`: Muestra el nombre del archivo que se pasará como argumento al script. `$@` representa todos los argumentos pasados al script.

-   `echo "Numero de argumentos: $#"`: Muestra cuántos argumentos ha recibido el script. `$#` indica el número de argumentos.

-   3\. **Contar secuencias y separar malas lecturas**

-   `numero_secuencias=$(grep -c '^@SRR098026' $@)`: Usa `grep` para contar cuántas secuencias empiezan con `@SRR098026` en el archivo (probablemente sea un prefijo en un archivo FASTQ que identifica secuencias de interés). `-c` cuenta las coincidencias.

-   `grep -B1 -A2 NNNNNNNNNN $@ > malas_lecturas.fastq`: Busca secuencias de calidad baja o problemáticas (que contengan 10 nucleótidos seguidos de `N`, que representan bases no determinadas).

    -   `-B1`: Muestra 1 línea antes de cada coincidencia de `NNNNNNNNNN`.

    -   `-A2`: Muestra 2 líneas después de la coincidencia.

    -   El resultado se guarda en un archivo llamado `malas_lecturas.fastq`.

-   `malas=$(cat malas_lecturas.fastq | wc -l)`: Cuenta el número total de líneas en `malas_lecturas.fastq` (esto indica la cantidad de malas lecturas encontradas).

-   `echo "Número de malas lecturas: $malas"`: Muestra la cantidad de malas lecturas encontradas

-   `echo "Numero de argumentos: $#"`: Muestra cuántos argumentos ha recibido el script. `$#` indica el número de argumentos.

-   4\. **Búsqueda de patrones**

-   `echo "Desea buscar patrones (y/n): "`: Pregunta al usuario si desea buscar patrones específicos en el archivo.

-   `read d`: Lee la respuesta del usuario y la guarda en la variable `d`.

-   `if [[ $d == "y" ]]; then`: Si la respuesta es "y" (sí), el script procede a buscar los patrones.

    -   `echo -e 'ACTG\nCCCCC\nNNNCNNN\nNNNGNNN\nTTTT\nTATA\nAAA' > patrones.txt`: Crea un archivo `patrones.txt` que contiene una lista de secuencias de interés (patrones a buscar).

    -   `grep -f patrones.txt $@ > busqueda.txt`: Busca los patrones contenidos en `patrones.txt` dentro del archivo de entrada. El resultado de la búsqueda se guarda en `busqueda.txt`.

    -   `echo "Búsqueda de patrones guardada en: busqueda.txt"`: Informa al usuario que los resultados de la búsqueda se guardaron en el archivo `busqueda.txt`.

-   `else`: Si la respuesta es "n" (no), simplemente muestra un mensaje.
:::

Este código realizará las siguientes instrucciones:

1.  Tomará como input el nombre del archivo `./_files/secuencias_bash.fastq` de secuencias fastq para analizar.

2.  Buscará dentro del archivo provisto por el usuario las secuencias con el string \@SRR098026 y las contará.

3.  Exportará las malas secuencias a un archivo llamado `malas_lecturas.fastq`, usando el string \"NNNNNNNNNN\" como plantilla.

4.  Reportará el número de malas secuencias.

5.  Luego buscaremos patrones en el archivo `buenas_lecturas.fastq`, si es que el usuario lo desea.

**Paso 3.** Deberías correr el script así, una vez que hayas descargado el archivo `secuencias_bash.fastq`:

``` {.bash code-copy="true" eval="false"}
bash demo.sh secuencias_bash.fastq
```

[![](https://rsg-ecuador.github.io/unix.bioinfo.rsgecuador/_images/b5.png)](https://rsg-ecuador.github.io/unix.bioinfo.rsgecuador/content/Curso_avanzado/02_Bash/1_bash.html)

## Material suplementario

-   RSG Ecuador. [Scripts en Bash](https://rsg-ecuador.github.io/unix.bioinfo.rsgecuador/content/Curso_avanzado/02_Bash/1_bash.html)
-   RSG Ecuador. [Wildcards y Streams](https://rsg-ecuador.github.io/unix.bioinfo.rsgecuador/content/Curso_basico/03_Manejo_terminal/5_wildcards.html)
-   RSG Ecuador. [Expresiones regulares (*regex*)](https://rsg-ecuador.github.io/unix.bioinfo.rsgecuador/content/Curso_basico/04_Procesamiento_ficheros_regex_pipes/3_Expresiones_regulares.html)
-   [Wildcard Selection in Bash](https://pressbooks.senecapolytechnic.ca/uli101/chapter/wildcard-selection-in-bash/)
